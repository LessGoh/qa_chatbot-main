import streamlit as st
import os
import tempfile
import time
from typing import List

try:
    from langchain.document_loaders import PyPDFLoader
except ImportError:
    try:
        from langchain_community.document_loaders import PyPDFLoader
    except ImportError:
        # Fallback to pypdf direct usage
        import pypdf
        from langchain.schema import Document
        
        class PyPDFLoader:
            def __init__(self, file_path):
                self.file_path = file_path
            
            def load_and_split(self):
                documents = []
                with open(self.file_path, 'rb') as file:
                    pdf_reader = pypdf.PdfReader(file)
                    for page_num, page in enumerate(pdf_reader.pages):
                        text = page.extract_text()
                        if text.strip():
                            doc = Document(
                                page_content=text,
                                metadata={"source": self.file_path, "page": page_num}
                            )
                            documents.append(doc)
                return documents

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema.runnable import RunnablePassthrough
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain.prompts import PromptTemplate
from langchain.vectorstores import Pinecone as LangchainPinecone
import pinecone

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'vectorstore' not in st.session_state:
    st.session_state.vectorstore = None
if 'documents_processed' not in st.session_state:
    st.session_state.documents_processed = False
if 'pinecone_initialized' not in st.session_state:
    st.session_state.pinecone_initialized = False

def format_docs(docs):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è RAG"""
    return "\n\n".join(doc.page_content for doc in docs)

def initialize_pinecone(api_key: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone"""
    try:
        pinecone.init(
            api_key=api_key,
            environment="us-east-1-aws"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–≥–∏–æ–Ω
        )
        
        index_name = "streamlit-qa-bot"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        if index_name not in pinecone.list_indexes():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            pinecone.create_index(
                name=index_name,
                dimension=1536,  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è text-embedding-ada-002
                metric="cosine"
            )
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
            while index_name not in pinecone.list_indexes():
                time.sleep(1)
        
        return True, index_name
    
    except Exception as e:
        return False, str(e)

def setup_vectorstore(api_key: str):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        success, result = initialize_pinecone(api_key)
        if not success:
            return False, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinecone: {result}"
        
        index_name = result
        embeddings = OpenAIEmbeddings()
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        vectorstore = LangchainPinecone.from_existing_index(
            index_name=index_name,
            embedding=embeddings
        )
        
        return True, vectorstore
    
    except Exception as e:
        return False, str(e)

def process_pdf_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_file_path = tmp_file.name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
        loader = PyPDFLoader(tmp_file_path)
        documents = loader.load_and_split()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len,
        )
        
        texts = text_splitter.split_documents(documents)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if st.session_state.vectorstore:
            st.session_state.vectorstore.add_documents(texts)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file_path)
        
        return True, len(texts)
    
    except Exception as e:
        return False, str(e)

def get_answer(question: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        if not st.session_state.vectorstore:
            return "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        # –°–æ–∑–¥–∞–µ–º retriever
        retriever = st.session_state.vectorstore.as_retriever(
            search_kwargs={"k": 3}
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        template = """–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
        –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, —Å–∫–∞–∂–∏ —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –æ—Ç–≤–µ—Ç.

        {context}

        –í–æ–ø—Ä–æ—Å: {question}
        –û—Ç–≤–µ—Ç:"""
        
        prompt = PromptTemplate.from_template(template)
        
        # –°–æ–∑–¥–∞–µ–º LLM
        llm = ChatOpenAI(
            model_name="gpt-3.5-turbo",
            temperature=0
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É RAG
        rag_chain = (
            {"context": retriever | format_docs, "question": RunnablePassthrough()}
            | prompt
            | llm
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        result = rag_chain.invoke(question)
        return result.content
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(
    page_title="Document QA System",
    page_icon="üìÑ",
    layout="wide"
)

st.title("üìÑ Document Question Answering System")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # OpenAI API Key
    openai_key = st.text_input(
        "üîë OpenAI API Key",
        type="password",
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á"
    )
    
    # Pinecone API Key
    pinecone_key = st.text_input(
        "üå≤ Pinecone API Key",
        type="password",
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Pinecone API –∫–ª—é—á"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if st.button("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"):
        if not openai_key:
            st.error("–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á")
        elif not pinecone_key:
            st.error("–í–≤–µ–¥–∏—Ç–µ Pinecone API –∫–ª—é—á")
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ["OPENAI_API_KEY"] = openai_key
            
            with st.spinner("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."):
                success, result = setup_vectorstore(pinecone_key)
                
                if success:
                    st.session_state.vectorstore = result
                    st.session_state.pinecone_initialized = True
                    st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {result}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if st.session_state.pinecone_initialized:
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìé –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª",
            type="pdf",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        if uploaded_file and st.button("üìÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
                success, result = process_pdf_file(uploaded_file)
            
            if success:
                st.success(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –°–æ–∑–¥–∞–Ω–æ {result} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                st.session_state.documents_processed = True
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result}")
    
    with col2:
        st.header("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
        
        if st.session_state.documents_processed:
            question = st.text_area(
                "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:",
                height=100,
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û —á–µ–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?"
            )
            
            if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç") and question:
                with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
                    answer = get_answer(question)
                
                st.subheader("üí¨ –û—Ç–≤–µ—Ç:")
                st.write(answer)
        else:
            st.info("üëà –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç")

else:
    st.warning("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
    
    with st.expander("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"):
        st.markdown("""
        ### –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏:
        
        1. **OpenAI API Key:**
           - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys
           - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á
           
        2. **Pinecone API Key:**
           - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://app.pinecone.io/
           - –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–∞–π–¥–∏—Ç–µ API –∫–ª—é—á
        
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        1. –í–≤–µ–¥–∏—Ç–µ –æ–±–∞ API –∫–ª—é—á–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        2. –ù–∞–∂–º–∏—Ç–µ "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
        3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç
        4. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("Built with ‚ù§Ô∏è using Streamlit, LangChain, OpenAI, and Pinecone")
